// 파일 이름: Gravity.cpp
// 설명: 이 파일은 main.cpp 를 구현합니다
// 작성자: 류성수
// 작성 날짜: 2024-06-04
// 수정 이력:
//		- 2024-xx-xx: [		내용	] (작성자: )

#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<string>
#include<vector>

#define PRINT_RECORD_NUM 10

using namespace std;

typedef struct
{
	string ID;
	long score;
}RECORD;

int main()
{

	/*-------------------------------*/
	// 1. 공룡클래스(유저)생성
	/*-------------------------------*/

	// 클래스 생성자입력


	/*-------------------------------*/
	// 2. 난이도, 시간초, 스코어 부분 선언
	/*-------------------------------*/

	int phase = 1;

	long time = 0;
	// double 형으로 선언하면, 0~2^12 까지밖에 카운트할 수 없음 그래서, 소수점을 날려버리는 대신 정수값으로 맞춰주는것

	long score = 0; // 32비트 정수값 -> 0~2^32-1 까지 계산
	// score = 시간초에 따른 계산 + 코인값(스코어 그자체) 로 계산됨


	/*-------------------------------*/
	// 3. 최대 기둥갯수
	/*-------------------------------*/

	


	/*-------------------------------*/
	// 4. 무한루프 생성 (실제 게임이 이뤄지는 부분)
	/*-------------------------------*/

	while (1)
	{























	}


	/*-------------------------------*/
	// 5. 저장부분
	/*-------------------------------*/

	system("cls"); // 일단 화면 초기화
	char answer;

	while (1) // 저장할거냐?
	{
		printf("\n저장하시겠습니까? (Y/N) : ");
		cin >> answer;

		if (answer == 'Y' || answer == 'y' || answer == 'N' || answer == 'n') //원하는 대답이 나올때까지 무한루프
			break;
	}

	string ID;

	if (answer == 'y' || answer == 'Y') // 저장할거임
	{
		printf("\n아이디를 입력하시오 : ");
		cin >> ID;



		/*-- 쓰기모드로 txt 파일 오픈 --*/

		// id와 스코어 작성하는 기능구현필요

		printf("\n성공적으로 저장되었습니다.");

		/*-- 쓰기모드의 fclose 작성 --*/




		/*-- 읽기모드로 txt 파일 오픈 --*/

		// txt 파일에 아마 아래와 같은 형식으로 저장될 것임 맨위의 구조체를 이용해, EOF까지 몇줄이 작성되었는지를 셀것 
		// 카운트한 숫자로 동적할당
		/*
		* 아이디1 점수
		* 아이디2 점수
		*/

		int Total_recordNum; // 몇개의 줄(기록)이 있는지

		RECORD* userRecord = new RECORD[Total_recordNum]; // 이렇게 동적할당

		
		// 이 동적할당받은 배열을 이용해, 점수를 기준으로 내림차순으로 정렬하는 코드

		
		for (int idx = 0; idx < PRINT_RECORD_NUM; idx++)// 내림차순으로 정렬되어있기에 원하는 등수만큼 주르륵 출력
		{
			printf("\n%d등 : %s님,\t:%d", idx, userRecord[idx].ID.c_str(), userRecord[idx].score);
		}

		/*-- 읽기모드의 fclose 작성 --*/

		delete[] userRecord; // 동적할당 받은 부분 삭제
	}
	
	/*-------------------------------*/
	// 6. 정리 부분
	/*-------------------------------*/

	// 할당해제부분
	// ex 공룡, 기둥벡터안의 기둥 인스턴스들, 코인 등을 할당해제


	return 0;
}